// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: circular2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Circular2 {

  /// <summary>Holder for reflection information generated from circular2.proto</summary>
  public static partial class Circular2Reflection {

    #region Descriptor
    /// <summary>File descriptor for circular2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Circular2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9jaXJjdWxhcjIucHJvdG8SCWNpcmN1bGFyMiIGCgRQaW5nIiUKE1JlZ2lz",
            "dHJhdGlvblN0YXRpb24SDgoGc2VyaWFsGAEgASgJIiYKCFRpbWVsaW5lEg0K",
            "BXN0YXJ0GAEgASgEEgsKA2VuZBgCIAEoBCKPAQoOVmlkZW9Jbml0RnJhbWUS",
            "DQoFd2lkdGgYASABKA0SDgoGaGVpZ2h0GAIgASgNEhYKDmZyYW1lUGVyU2Vj",
            "b25kGAMgASgNEg4KBnNwc3BwcxgEIAEoDBIOCgZ1dHNfbXMYBSABKAQSJgoJ",
            "dGltZWxpbmVzGAYgAygLMhMuY2lyY3VsYXIyLlRpbWVsaW5lIisKClZpZGVv",
            "RnJhbWUSDQoFZnJhbWUYASABKAwSDgoGdXRzX21zGAIgASgEIp0ICgdHZW5E",
            "YXRhEg4KBnNlcmlhbBgBIAEoCRIXCg9iYXR0ZXJ5Q2FwYWNpdHkYAiABKAIS",
            "HQoVYmF0dGVyeUxvd1ZvbHRhZ2VTYWZlGAMgASgCEi4KJndpbmRTdGFydEJh",
            "dHRlcnlWb2x0YWdlQWZ0ZXJGdWxsQ2hhcmdlGAQgASgCEhgKEG51bU9mV2lu",
            "ZEdlblBvbGUYBSABKAUSJAocZHVtbXlMb2FkQnJha2luZ0FwcGx5Vm9sdGFn",
            "ZRgGIAEoAhIkChxkdW1teUxvYWRCcmFraW5nQ2xlYXJWb2x0YWdlGAcgASgC",
            "EiAKGHNob3J0QnJha2luZ0FwcGx5Vm9sdGFnZRgIIAEoAhIgChhzaG9ydEJy",
            "YWtpbmdDbGVhclZvbHRhZ2UYCSABKAISIAoYZHVtbXlMb2FkQnJha2luZ0Fw",
            "cGx5UnBtGAogASgCEiAKGGR1bW15TG9hZEJyYWtpbmdDbGVhclJwbRgLIAEo",
            "AhIgChhsaW5lU2hvcnRCcmFraW5nQXBwbHlScG0YDCABKAISIAoYbGluZVNo",
            "b3J0QnJha2luZ0NsZWFyUnBtGA0gASgCEhcKD0xlZDFPbkNvbmRpdGlvbhgO",
            "IAEoAhIYChBMZWQxT2ZmQ29uZGl0aW9uGA8gASgCEhcKD0xlZDJPbkNvbmRp",
            "dGlvbhgQIAEoAhIYChBMZWQyT2ZmQ29uZGl0aW9uGBEgASgCEhcKD0xlZDFP",
            "bk9mZk1ldGhvZBgSIAEoBRIXCg9MZWQyT25PZmZNZXRob2QYEyABKAUSFQoN",
            "TGVkMU1heE9uVGltZRgUIAEoBRIVCg1MZWQyTWF4T25UaW1lGBUgASgFEhUK",
            "DWJhdHRlcnlBbXBhcmUYFiABKAISFgoOYmF0dGVyeVZvbHRhZ2UYFyABKAIS",
            "FgoOd2luZEdlblZvbHRhZ2UYGCABKAISFQoNd2luZEdlbkFtcGFyZRgZIAEo",
            "AhIRCglwdlZvbHRhZ2UYGiABKAISEAoIcHZBbXBhcmUYGyABKAISEQoJd2lu",
            "ZFBvd2VyGBwgASgCEg8KB3B2UG93ZXIYHSABKAISEwoLTGVkMVZvbHRhZ2UY",
            "HiABKAISEgoKTGVkMUFtcGFyZRgfIAEoAhITCgtMZWQyVm9sdGFnZRggIAEo",
            "AhISCgpMZWQyQW1wYXJlGCEgASgCEhIKCkxlZDFPblRpbWUYIiABKAUSEgoK",
            "TGVkMk9uVGltZRgjIAEoBRIWCg5kdW1teUxvYWRCcmFrZRgkIAEoBRIWCg5s",
            "aW5lU2hvcnRCcmFrZRglIAEoBRIRCglzdGF0dXNCaXQYJiABKAUSHwoXYmF0",
            "dGVyeUNoYXJnZVdpbmRBbXBhcmUYJyABKAISHQoVYmF0dGVyeUNoYXJnZVB2",
            "QW1wYXJlGCggASgCIjoKE0dlbkRhdGFTdGFydFJlcXVlc3QSEwoLYWNjZXNz",
            "VG9rZW4YASABKAkSDgoGc2VyaWFsGAIgASgJIl4KFEdlbkRhdGFTdGFydFJl",
            "c3BvbnNlEiEKBnJlc3VsdBgBIAEoDjIRLmNpcmN1bGFyMi5SZXN1bHQSEwoL",
            "YWNjZXNzVG9rZW4YAiABKAkSDgoGc2VyaWFsGAMgASgJIjkKEkdlbkRhdGFT",
            "dG9wUmVxdWVzdBITCgthY2Nlc3NUb2tlbhgBIAEoCRIOCgZzZXJpYWwYAiAB",
            "KAkiXQoTR2VuRGF0YVN0b3BSZXNwb25zZRIhCgZyZXN1bHQYASABKA4yES5j",
            "aXJjdWxhcjIuUmVzdWx0EhMKC2FjY2Vzc1Rva2VuGAIgASgJEg4KBnNlcmlh",
            "bBgDIAEoCSJ/ChpSZWdpc3RyYXRpb25TdGF0aW9uUmVxdWVzdBIOCgZzZXJp",
            "YWwYASABKAkSCwoDbWFjGAIgASgJEhEKCXN3VmVyc2lvbhgDIAEoCRIRCglo",
            "d1ZlcnNpb24YBCABKAkSDQoFcHJpSVAYBSABKAkSDwoHcHJpUG9ydBgGIAEo",
            "BSJAChtSZWdpc3RyYXRpb25TdGF0aW9uUmVzcG9uc2USIQoGcmVzdWx0GAEg",
            "ASgOMhEuY2lyY3VsYXIyLlJlc3VsdCJeChlSZWdpc3RyYXRpb25WaWV3ZXJS",
            "ZXF1ZXN0Eg4KBnNlcmlhbBgBIAEoCRIRCglzd1ZlcnNpb24YAiABKAkSDQoF",
            "cHJpSVAYAyABKAkSDwoHcHJpUG9ydBgEIAEoBSI/ChpSZWdpc3RyYXRpb25W",
            "aWV3ZXJSZXNwb25zZRIhCgZyZXN1bHQYASABKA4yES5jaXJjdWxhcjIuUmVz",
            "dWx0IkkKFVN0cmVhbWluZ1N0YXJ0UmVxdWVzdBITCgthY2Nlc3NUb2tlbhgB",
            "IAEoCRIOCgZzZXJpYWwYAiABKAkSCwoDdXRzGAMgASgEIlgKFlN0cmVhbWlu",
            "Z1N0YXJ0UmVzcG9uc2USIQoGcmVzdWx0GAEgASgOMhEuY2lyY3VsYXIyLlJl",
            "c3VsdBIOCgZzZXJpYWwYAiABKAkSCwoDdXRzGAMgASgEIjsKFFN0cmVhbWlu",
            "Z1N0b3BSZXF1ZXN0EhMKC2FjY2Vzc1Rva2VuGAEgASgJEg4KBnNlcmlhbBgC",
            "IAEoCSJKChVTdHJlYW1pbmdTdG9wUmVzcG9uc2USIQoGcmVzdWx0GAEgASgO",
            "MhEuY2lyY3VsYXIyLlJlc3VsdBIOCgZzZXJpYWwYAiABKAkiDQoLVmlkZW9C",
            "cm9rZW4iPAoLQXV0aFN0YXRpb24SDAoEbmFtZRgBIAEoCBIPCgdzaGFyaW5n",
            "GAIgASgIEg4KBnVwZGF0ZRgDIAEoCCKQAgoHU3RhdGlvbhIMCgRuYW1lGAEg",
            "ASgJEgsKA21hYxgCIAEoCRINCgVvd25lchgDIAEoCRIQCghwdWJsaWNJUBgE",
            "IAEoCRISCgpwdWJsaWNQb3J0GAUgASgFEhEKCXByaXZhdGVJUBgGIAEoCRIT",
            "Cgtwcml2YXRlUG9ydBgHIAEoBRIMCgRwaW5nGAggASgNEg8KB3JlZ0RhdGUY",
            "CSABKAkSEQoJc3dWZXJzaW9uGAogASgJEhEKCWh3VmVyc2lvbhgLIAEoCRIS",
            "CgpjYW1lcmFOYW1lGAwgASgJEg4KBnNlcmlhbBgNIAEoCRIkCgRhdXRoGA4g",
            "ASgLMhYuY2lyY3VsYXIyLkF1dGhTdGF0aW9uIikKElN0YXRpb25MaXN0UmVx",
            "dWVzdBITCgthY2Nlc3NUb2tlbhgBIAEoCSJhChNTdGF0aW9uTGlzdFJlc3Bv",
            "bnNlEiEKBnJlc3VsdBgBIAEoDjIRLmNpcmN1bGFyMi5SZXN1bHQSJwoLc3Rh",
            "dGlvbkxpc3QYAiADKAsyEi5jaXJjdWxhcjIuU3RhdGlvbiJGChFBZGRTdGF0",
            "aW9uUmVxdWVzdBITCgthY2Nlc3NUb2tlbhgBIAEoCRIOCgZzZXJpYWwYAiAB",
            "KAkSDAoEYXV0aBgDIAEoCSJHChJBZGRTdGF0aW9uUmVzcG9uc2USIQoGcmVz",
            "dWx0GAEgASgOMhEuY2lyY3VsYXIyLlJlc3VsdBIOCgZzZXJpYWwYAiABKAki",
            "cAoTU2hhcmVTdGF0aW9uUmVxdWVzdBITCgthY2Nlc3NUb2tlbhgBIAEoCRIO",
            "CgZzZXJpYWwYAiABKAkSDgoGdXNlcklEGAMgASgJEiQKBGF1dGgYBCABKAsy",
            "Fi5jaXJjdWxhcjIuQXV0aFN0YXRpb24iWQoUU2hhcmVTdGF0aW9uUmVzcG9u",
            "c2USIQoGcmVzdWx0GAEgASgOMhEuY2lyY3VsYXIyLlJlc3VsdBIOCgZzZXJp",
            "YWwYAiABKAkSDgoGdXNlcklEGAMgASgJKsEECgpQYWNrZXRUeXBlEggKBHBp",
            "bmcQABISCg52aWRlb0luaXRGcmFtZRABEg4KCnZpZGVvRnJhbWUQAhIZChVz",
            "dHJlYW1pbmdTdGFydFJlcXVlc3QQAxIaChZzdHJlYW1pbmdTdGFydFJlc3Bv",
            "bnNlEAQSGAoUc3RyZWFtaW5nU3RvcFJlcXVlc3QQBRIZChVzdHJlYW1pbmdT",
            "dG9wUmVzcG9uc2UQBhIPCgt2aWRlb0Jyb2tlbhAHEgsKB2dlbkRhdGEQZBIX",
            "ChNnZW5EYXRhU3RhcnRSZXF1ZXN0EGUSGAoUZ2VuRGF0YVN0YXJ0UmVzcG9u",
            "c2UQZhIWChJnZW5EYXRhU3RvcFJlcXVlc3QQZxIXChNnZW5EYXRhU3RvcFJl",
            "c3BvbnNlEGgSHgoacmVnaXN0cmF0aW9uU3RhdGlvblJlcXVlc3QQaRIfChty",
            "ZWdpc3RyYXRpb25TdGF0aW9uUmVzcG9uc2UQahIdChlyZWdpc3RyYXRpb25W",
            "aWV3ZXJSZXF1ZXN0EGsSHgoacmVnaXN0cmF0aW9uVmlld2VyUmVzcG9uc2UQ",
            "bBIXChJzdGF0aW9uTGlzdFJlcXVlc3QQlgESGAoTc3RhdGlvbkxpc3RSZXNw",
            "b25zZRCXARIWChFhZGRTdGF0aW9uUmVxdWVzdBCYARIXChJhZGRTdGF0aW9u",
            "UmVzcG9uc2UQmQESGAoTc2hhcmVTdGF0aW9uUmVxdWVzdBCaARIZChRzaGFy",
            "ZVN0YXRpb25SZXNwb25zZRCbASqnAQoGUmVzdWx0EgsKB3N1Y2Nlc3MQABIQ",
            "CgxleHBpcmVkVG9rZW4QARIQCgx1bmF1dGhvcml6ZWQQAhIQCgx1c2VyTm90",
            "RXhpc3QQAxISCg5hbHJlYWR5U3RhcnRlZBAKEhIKDmFscmVhZHlTdG9wcGVk",
            "EAsSEAoMZGF0YU5vdEZvdW5kEAwSFAoQYWxyZWFkeUV4aXN0VXNlchAUEgoK",
            "BmZhaWxlZBBkKjMKCkRldmljZVR5cGUSCAoEbm9uZRAAEgoKBnZpZXdlchAB",
            "Eg8KC2lvdF9zdGF0aW9uEAJCFgoJbmV0Lmlqb29uQglDaXJjdWxhcjJiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Circular2.PacketType), typeof(global::Circular2.Result), typeof(global::Circular2.DeviceType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.Ping), global::Circular2.Ping.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.RegistrationStation), global::Circular2.RegistrationStation.Parser, new[]{ "Serial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.Timeline), global::Circular2.Timeline.Parser, new[]{ "Start", "End" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.VideoInitFrame), global::Circular2.VideoInitFrame.Parser, new[]{ "Width", "Height", "FramePerSecond", "Spspps", "UtsMs", "Timelines" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.VideoFrame), global::Circular2.VideoFrame.Parser, new[]{ "Frame", "UtsMs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.GenData), global::Circular2.GenData.Parser, new[]{ "Serial", "BatteryCapacity", "BatteryLowVoltageSafe", "WindStartBatteryVoltageAfterFullCharge", "NumOfWindGenPole", "DummyLoadBrakingApplyVoltage", "DummyLoadBrakingClearVoltage", "ShortBrakingApplyVoltage", "ShortBrakingClearVoltage", "DummyLoadBrakingApplyRpm", "DummyLoadBrakingClearRpm", "LineShortBrakingApplyRpm", "LineShortBrakingClearRpm", "Led1OnCondition", "Led1OffCondition", "Led2OnCondition", "Led2OffCondition", "Led1OnOffMethod", "Led2OnOffMethod", "Led1MaxOnTime", "Led2MaxOnTime", "BatteryAmpare", "BatteryVoltage", "WindGenVoltage", "WindGenAmpare", "PvVoltage", "PvAmpare", "WindPower", "PvPower", "Led1Voltage", "Led1Ampare", "Led2Voltage", "Led2Ampare", "Led1OnTime", "Led2OnTime", "DummyLoadBrake", "LineShortBrake", "StatusBit", "BatteryChargeWindAmpare", "BatteryChargePvAmpare" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.GenDataStartRequest), global::Circular2.GenDataStartRequest.Parser, new[]{ "AccessToken", "Serial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.GenDataStartResponse), global::Circular2.GenDataStartResponse.Parser, new[]{ "Result", "AccessToken", "Serial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.GenDataStopRequest), global::Circular2.GenDataStopRequest.Parser, new[]{ "AccessToken", "Serial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.GenDataStopResponse), global::Circular2.GenDataStopResponse.Parser, new[]{ "Result", "AccessToken", "Serial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.RegistrationStationRequest), global::Circular2.RegistrationStationRequest.Parser, new[]{ "Serial", "Mac", "SwVersion", "HwVersion", "PriIP", "PriPort" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.RegistrationStationResponse), global::Circular2.RegistrationStationResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.RegistrationViewerRequest), global::Circular2.RegistrationViewerRequest.Parser, new[]{ "Serial", "SwVersion", "PriIP", "PriPort" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.RegistrationViewerResponse), global::Circular2.RegistrationViewerResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.StreamingStartRequest), global::Circular2.StreamingStartRequest.Parser, new[]{ "AccessToken", "Serial", "Uts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.StreamingStartResponse), global::Circular2.StreamingStartResponse.Parser, new[]{ "Result", "Serial", "Uts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.StreamingStopRequest), global::Circular2.StreamingStopRequest.Parser, new[]{ "AccessToken", "Serial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.StreamingStopResponse), global::Circular2.StreamingStopResponse.Parser, new[]{ "Result", "Serial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.VideoBroken), global::Circular2.VideoBroken.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.AuthStation), global::Circular2.AuthStation.Parser, new[]{ "Name", "Sharing", "Update" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.Station), global::Circular2.Station.Parser, new[]{ "Name", "Mac", "Owner", "PublicIP", "PublicPort", "PrivateIP", "PrivatePort", "Ping", "RegDate", "SwVersion", "HwVersion", "CameraName", "Serial", "Auth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.StationListRequest), global::Circular2.StationListRequest.Parser, new[]{ "AccessToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.StationListResponse), global::Circular2.StationListResponse.Parser, new[]{ "Result", "StationList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.AddStationRequest), global::Circular2.AddStationRequest.Parser, new[]{ "AccessToken", "Serial", "Auth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.AddStationResponse), global::Circular2.AddStationResponse.Parser, new[]{ "Result", "Serial" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.ShareStationRequest), global::Circular2.ShareStationRequest.Parser, new[]{ "AccessToken", "Serial", "UserID", "Auth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Circular2.ShareStationResponse), global::Circular2.ShareStationResponse.Parser, new[]{ "Result", "Serial", "UserID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PacketType {
    [pbr::OriginalName("ping")] Ping = 0,
    [pbr::OriginalName("videoInitFrame")] VideoInitFrame = 1,
    [pbr::OriginalName("videoFrame")] VideoFrame = 2,
    [pbr::OriginalName("streamingStartRequest")] StreamingStartRequest = 3,
    [pbr::OriginalName("streamingStartResponse")] StreamingStartResponse = 4,
    [pbr::OriginalName("streamingStopRequest")] StreamingStopRequest = 5,
    [pbr::OriginalName("streamingStopResponse")] StreamingStopResponse = 6,
    [pbr::OriginalName("videoBroken")] VideoBroken = 7,
    [pbr::OriginalName("genData")] GenData = 100,
    [pbr::OriginalName("genDataStartRequest")] GenDataStartRequest = 101,
    [pbr::OriginalName("genDataStartResponse")] GenDataStartResponse = 102,
    [pbr::OriginalName("genDataStopRequest")] GenDataStopRequest = 103,
    [pbr::OriginalName("genDataStopResponse")] GenDataStopResponse = 104,
    [pbr::OriginalName("registrationStationRequest")] RegistrationStationRequest = 105,
    [pbr::OriginalName("registrationStationResponse")] RegistrationStationResponse = 106,
    [pbr::OriginalName("registrationViewerRequest")] RegistrationViewerRequest = 107,
    [pbr::OriginalName("registrationViewerResponse")] RegistrationViewerResponse = 108,
    [pbr::OriginalName("stationListRequest")] StationListRequest = 150,
    [pbr::OriginalName("stationListResponse")] StationListResponse = 151,
    [pbr::OriginalName("addStationRequest")] AddStationRequest = 152,
    [pbr::OriginalName("addStationResponse")] AddStationResponse = 153,
    [pbr::OriginalName("shareStationRequest")] ShareStationRequest = 154,
    [pbr::OriginalName("shareStationResponse")] ShareStationResponse = 155,
  }

  public enum Result {
    [pbr::OriginalName("success")] Success = 0,
    [pbr::OriginalName("expiredToken")] ExpiredToken = 1,
    [pbr::OriginalName("unauthorized")] Unauthorized = 2,
    [pbr::OriginalName("userNotExist")] UserNotExist = 3,
    [pbr::OriginalName("alreadyStarted")] AlreadyStarted = 10,
    [pbr::OriginalName("alreadyStopped")] AlreadyStopped = 11,
    [pbr::OriginalName("dataNotFound")] DataNotFound = 12,
    [pbr::OriginalName("alreadyExistUser")] AlreadyExistUser = 20,
    [pbr::OriginalName("failed")] Failed = 100,
  }

  public enum DeviceType {
    [pbr::OriginalName("none")] None = 0,
    [pbr::OriginalName("viewer")] Viewer = 1,
    [pbr::OriginalName("iot_station")] IotStation = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Ping : pb::IMessage<Ping> {
    private static readonly pb::MessageParser<Ping> _parser = new pb::MessageParser<Ping>(() => new Ping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping(Ping other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping Clone() {
      return new Ping(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RegistrationStation : pb::IMessage<RegistrationStation> {
    private static readonly pb::MessageParser<RegistrationStation> _parser = new pb::MessageParser<RegistrationStation>(() => new RegistrationStation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistrationStation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationStation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationStation(RegistrationStation other) : this() {
      serial_ = other.serial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationStation Clone() {
      return new RegistrationStation(this);
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 1;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistrationStation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistrationStation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Serial != other.Serial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Serial.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Serial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistrationStation other) {
      if (other == null) {
        return;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Serial = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Timeline : pb::IMessage<Timeline> {
    private static readonly pb::MessageParser<Timeline> _parser = new pb::MessageParser<Timeline>(() => new Timeline());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timeline> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timeline() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timeline(Timeline other) : this() {
      start_ = other.start_;
      end_ = other.end_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timeline Clone() {
      return new Timeline(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private ulong start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private ulong end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timeline);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timeline other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0UL) hash ^= Start.GetHashCode();
      if (End != 0UL) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Start);
      }
      if (End != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Start);
      }
      if (End != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(End);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timeline other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0UL) {
        Start = other.Start;
      }
      if (other.End != 0UL) {
        End = other.End;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadUInt64();
            break;
          }
          case 16: {
            End = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VideoInitFrame : pb::IMessage<VideoInitFrame> {
    private static readonly pb::MessageParser<VideoInitFrame> _parser = new pb::MessageParser<VideoInitFrame>(() => new VideoInitFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoInitFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoInitFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoInitFrame(VideoInitFrame other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      framePerSecond_ = other.framePerSecond_;
      spspps_ = other.spspps_;
      utsMs_ = other.utsMs_;
      timelines_ = other.timelines_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoInitFrame Clone() {
      return new VideoInitFrame(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "framePerSecond" field.</summary>
    public const int FramePerSecondFieldNumber = 3;
    private uint framePerSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FramePerSecond {
      get { return framePerSecond_; }
      set {
        framePerSecond_ = value;
      }
    }

    /// <summary>Field number for the "spspps" field.</summary>
    public const int SpsppsFieldNumber = 4;
    private pb::ByteString spspps_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Spspps {
      get { return spspps_; }
      set {
        spspps_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uts_ms" field.</summary>
    public const int UtsMsFieldNumber = 5;
    private ulong utsMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UtsMs {
      get { return utsMs_; }
      set {
        utsMs_ = value;
      }
    }

    /// <summary>Field number for the "timelines" field.</summary>
    public const int TimelinesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Circular2.Timeline> _repeated_timelines_codec
        = pb::FieldCodec.ForMessage(50, global::Circular2.Timeline.Parser);
    private readonly pbc::RepeatedField<global::Circular2.Timeline> timelines_ = new pbc::RepeatedField<global::Circular2.Timeline>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Circular2.Timeline> Timelines {
      get { return timelines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoInitFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoInitFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (FramePerSecond != other.FramePerSecond) return false;
      if (Spspps != other.Spspps) return false;
      if (UtsMs != other.UtsMs) return false;
      if(!timelines_.Equals(other.timelines_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (FramePerSecond != 0) hash ^= FramePerSecond.GetHashCode();
      if (Spspps.Length != 0) hash ^= Spspps.GetHashCode();
      if (UtsMs != 0UL) hash ^= UtsMs.GetHashCode();
      hash ^= timelines_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      if (FramePerSecond != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FramePerSecond);
      }
      if (Spspps.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Spspps);
      }
      if (UtsMs != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(UtsMs);
      }
      timelines_.WriteTo(output, _repeated_timelines_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (FramePerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FramePerSecond);
      }
      if (Spspps.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Spspps);
      }
      if (UtsMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UtsMs);
      }
      size += timelines_.CalculateSize(_repeated_timelines_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoInitFrame other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.FramePerSecond != 0) {
        FramePerSecond = other.FramePerSecond;
      }
      if (other.Spspps.Length != 0) {
        Spspps = other.Spspps;
      }
      if (other.UtsMs != 0UL) {
        UtsMs = other.UtsMs;
      }
      timelines_.Add(other.timelines_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 24: {
            FramePerSecond = input.ReadUInt32();
            break;
          }
          case 34: {
            Spspps = input.ReadBytes();
            break;
          }
          case 40: {
            UtsMs = input.ReadUInt64();
            break;
          }
          case 50: {
            timelines_.AddEntriesFrom(input, _repeated_timelines_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VideoFrame : pb::IMessage<VideoFrame> {
    private static readonly pb::MessageParser<VideoFrame> _parser = new pb::MessageParser<VideoFrame>(() => new VideoFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoFrame(VideoFrame other) : this() {
      frame_ = other.frame_;
      utsMs_ = other.utsMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoFrame Clone() {
      return new VideoFrame(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private pb::ByteString frame_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Frame {
      get { return frame_; }
      set {
        frame_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uts_ms" field.</summary>
    public const int UtsMsFieldNumber = 2;
    private ulong utsMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UtsMs {
      get { return utsMs_; }
      set {
        utsMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (UtsMs != other.UtsMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame.Length != 0) hash ^= Frame.GetHashCode();
      if (UtsMs != 0UL) hash ^= UtsMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Frame);
      }
      if (UtsMs != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UtsMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Frame);
      }
      if (UtsMs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UtsMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoFrame other) {
      if (other == null) {
        return;
      }
      if (other.Frame.Length != 0) {
        Frame = other.Frame;
      }
      if (other.UtsMs != 0UL) {
        UtsMs = other.UtsMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Frame = input.ReadBytes();
            break;
          }
          case 16: {
            UtsMs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenData : pb::IMessage<GenData> {
    private static readonly pb::MessageParser<GenData> _parser = new pb::MessageParser<GenData>(() => new GenData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenData(GenData other) : this() {
      serial_ = other.serial_;
      batteryCapacity_ = other.batteryCapacity_;
      batteryLowVoltageSafe_ = other.batteryLowVoltageSafe_;
      windStartBatteryVoltageAfterFullCharge_ = other.windStartBatteryVoltageAfterFullCharge_;
      numOfWindGenPole_ = other.numOfWindGenPole_;
      dummyLoadBrakingApplyVoltage_ = other.dummyLoadBrakingApplyVoltage_;
      dummyLoadBrakingClearVoltage_ = other.dummyLoadBrakingClearVoltage_;
      shortBrakingApplyVoltage_ = other.shortBrakingApplyVoltage_;
      shortBrakingClearVoltage_ = other.shortBrakingClearVoltage_;
      dummyLoadBrakingApplyRpm_ = other.dummyLoadBrakingApplyRpm_;
      dummyLoadBrakingClearRpm_ = other.dummyLoadBrakingClearRpm_;
      lineShortBrakingApplyRpm_ = other.lineShortBrakingApplyRpm_;
      lineShortBrakingClearRpm_ = other.lineShortBrakingClearRpm_;
      led1OnCondition_ = other.led1OnCondition_;
      led1OffCondition_ = other.led1OffCondition_;
      led2OnCondition_ = other.led2OnCondition_;
      led2OffCondition_ = other.led2OffCondition_;
      led1OnOffMethod_ = other.led1OnOffMethod_;
      led2OnOffMethod_ = other.led2OnOffMethod_;
      led1MaxOnTime_ = other.led1MaxOnTime_;
      led2MaxOnTime_ = other.led2MaxOnTime_;
      batteryAmpare_ = other.batteryAmpare_;
      batteryVoltage_ = other.batteryVoltage_;
      windGenVoltage_ = other.windGenVoltage_;
      windGenAmpare_ = other.windGenAmpare_;
      pvVoltage_ = other.pvVoltage_;
      pvAmpare_ = other.pvAmpare_;
      windPower_ = other.windPower_;
      pvPower_ = other.pvPower_;
      led1Voltage_ = other.led1Voltage_;
      led1Ampare_ = other.led1Ampare_;
      led2Voltage_ = other.led2Voltage_;
      led2Ampare_ = other.led2Ampare_;
      led1OnTime_ = other.led1OnTime_;
      led2OnTime_ = other.led2OnTime_;
      dummyLoadBrake_ = other.dummyLoadBrake_;
      lineShortBrake_ = other.lineShortBrake_;
      statusBit_ = other.statusBit_;
      batteryChargeWindAmpare_ = other.batteryChargeWindAmpare_;
      batteryChargePvAmpare_ = other.batteryChargePvAmpare_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenData Clone() {
      return new GenData(this);
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 1;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batteryCapacity" field.</summary>
    public const int BatteryCapacityFieldNumber = 2;
    private float batteryCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BatteryCapacity {
      get { return batteryCapacity_; }
      set {
        batteryCapacity_ = value;
      }
    }

    /// <summary>Field number for the "batteryLowVoltageSafe" field.</summary>
    public const int BatteryLowVoltageSafeFieldNumber = 3;
    private float batteryLowVoltageSafe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BatteryLowVoltageSafe {
      get { return batteryLowVoltageSafe_; }
      set {
        batteryLowVoltageSafe_ = value;
      }
    }

    /// <summary>Field number for the "windStartBatteryVoltageAfterFullCharge" field.</summary>
    public const int WindStartBatteryVoltageAfterFullChargeFieldNumber = 4;
    private float windStartBatteryVoltageAfterFullCharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WindStartBatteryVoltageAfterFullCharge {
      get { return windStartBatteryVoltageAfterFullCharge_; }
      set {
        windStartBatteryVoltageAfterFullCharge_ = value;
      }
    }

    /// <summary>Field number for the "numOfWindGenPole" field.</summary>
    public const int NumOfWindGenPoleFieldNumber = 5;
    private int numOfWindGenPole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumOfWindGenPole {
      get { return numOfWindGenPole_; }
      set {
        numOfWindGenPole_ = value;
      }
    }

    /// <summary>Field number for the "dummyLoadBrakingApplyVoltage" field.</summary>
    public const int DummyLoadBrakingApplyVoltageFieldNumber = 6;
    private float dummyLoadBrakingApplyVoltage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DummyLoadBrakingApplyVoltage {
      get { return dummyLoadBrakingApplyVoltage_; }
      set {
        dummyLoadBrakingApplyVoltage_ = value;
      }
    }

    /// <summary>Field number for the "dummyLoadBrakingClearVoltage" field.</summary>
    public const int DummyLoadBrakingClearVoltageFieldNumber = 7;
    private float dummyLoadBrakingClearVoltage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DummyLoadBrakingClearVoltage {
      get { return dummyLoadBrakingClearVoltage_; }
      set {
        dummyLoadBrakingClearVoltage_ = value;
      }
    }

    /// <summary>Field number for the "shortBrakingApplyVoltage" field.</summary>
    public const int ShortBrakingApplyVoltageFieldNumber = 8;
    private float shortBrakingApplyVoltage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShortBrakingApplyVoltage {
      get { return shortBrakingApplyVoltage_; }
      set {
        shortBrakingApplyVoltage_ = value;
      }
    }

    /// <summary>Field number for the "shortBrakingClearVoltage" field.</summary>
    public const int ShortBrakingClearVoltageFieldNumber = 9;
    private float shortBrakingClearVoltage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShortBrakingClearVoltage {
      get { return shortBrakingClearVoltage_; }
      set {
        shortBrakingClearVoltage_ = value;
      }
    }

    /// <summary>Field number for the "dummyLoadBrakingApplyRpm" field.</summary>
    public const int DummyLoadBrakingApplyRpmFieldNumber = 10;
    private float dummyLoadBrakingApplyRpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DummyLoadBrakingApplyRpm {
      get { return dummyLoadBrakingApplyRpm_; }
      set {
        dummyLoadBrakingApplyRpm_ = value;
      }
    }

    /// <summary>Field number for the "dummyLoadBrakingClearRpm" field.</summary>
    public const int DummyLoadBrakingClearRpmFieldNumber = 11;
    private float dummyLoadBrakingClearRpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DummyLoadBrakingClearRpm {
      get { return dummyLoadBrakingClearRpm_; }
      set {
        dummyLoadBrakingClearRpm_ = value;
      }
    }

    /// <summary>Field number for the "lineShortBrakingApplyRpm" field.</summary>
    public const int LineShortBrakingApplyRpmFieldNumber = 12;
    private float lineShortBrakingApplyRpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LineShortBrakingApplyRpm {
      get { return lineShortBrakingApplyRpm_; }
      set {
        lineShortBrakingApplyRpm_ = value;
      }
    }

    /// <summary>Field number for the "lineShortBrakingClearRpm" field.</summary>
    public const int LineShortBrakingClearRpmFieldNumber = 13;
    private float lineShortBrakingClearRpm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LineShortBrakingClearRpm {
      get { return lineShortBrakingClearRpm_; }
      set {
        lineShortBrakingClearRpm_ = value;
      }
    }

    /// <summary>Field number for the "Led1OnCondition" field.</summary>
    public const int Led1OnConditionFieldNumber = 14;
    private float led1OnCondition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Led1OnCondition {
      get { return led1OnCondition_; }
      set {
        led1OnCondition_ = value;
      }
    }

    /// <summary>Field number for the "Led1OffCondition" field.</summary>
    public const int Led1OffConditionFieldNumber = 15;
    private float led1OffCondition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Led1OffCondition {
      get { return led1OffCondition_; }
      set {
        led1OffCondition_ = value;
      }
    }

    /// <summary>Field number for the "Led2OnCondition" field.</summary>
    public const int Led2OnConditionFieldNumber = 16;
    private float led2OnCondition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Led2OnCondition {
      get { return led2OnCondition_; }
      set {
        led2OnCondition_ = value;
      }
    }

    /// <summary>Field number for the "Led2OffCondition" field.</summary>
    public const int Led2OffConditionFieldNumber = 17;
    private float led2OffCondition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Led2OffCondition {
      get { return led2OffCondition_; }
      set {
        led2OffCondition_ = value;
      }
    }

    /// <summary>Field number for the "Led1OnOffMethod" field.</summary>
    public const int Led1OnOffMethodFieldNumber = 18;
    private int led1OnOffMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Led1OnOffMethod {
      get { return led1OnOffMethod_; }
      set {
        led1OnOffMethod_ = value;
      }
    }

    /// <summary>Field number for the "Led2OnOffMethod" field.</summary>
    public const int Led2OnOffMethodFieldNumber = 19;
    private int led2OnOffMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Led2OnOffMethod {
      get { return led2OnOffMethod_; }
      set {
        led2OnOffMethod_ = value;
      }
    }

    /// <summary>Field number for the "Led1MaxOnTime" field.</summary>
    public const int Led1MaxOnTimeFieldNumber = 20;
    private int led1MaxOnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Led1MaxOnTime {
      get { return led1MaxOnTime_; }
      set {
        led1MaxOnTime_ = value;
      }
    }

    /// <summary>Field number for the "Led2MaxOnTime" field.</summary>
    public const int Led2MaxOnTimeFieldNumber = 21;
    private int led2MaxOnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Led2MaxOnTime {
      get { return led2MaxOnTime_; }
      set {
        led2MaxOnTime_ = value;
      }
    }

    /// <summary>Field number for the "batteryAmpare" field.</summary>
    public const int BatteryAmpareFieldNumber = 22;
    private float batteryAmpare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BatteryAmpare {
      get { return batteryAmpare_; }
      set {
        batteryAmpare_ = value;
      }
    }

    /// <summary>Field number for the "batteryVoltage" field.</summary>
    public const int BatteryVoltageFieldNumber = 23;
    private float batteryVoltage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BatteryVoltage {
      get { return batteryVoltage_; }
      set {
        batteryVoltage_ = value;
      }
    }

    /// <summary>Field number for the "windGenVoltage" field.</summary>
    public const int WindGenVoltageFieldNumber = 24;
    private float windGenVoltage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WindGenVoltage {
      get { return windGenVoltage_; }
      set {
        windGenVoltage_ = value;
      }
    }

    /// <summary>Field number for the "windGenAmpare" field.</summary>
    public const int WindGenAmpareFieldNumber = 25;
    private float windGenAmpare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WindGenAmpare {
      get { return windGenAmpare_; }
      set {
        windGenAmpare_ = value;
      }
    }

    /// <summary>Field number for the "pvVoltage" field.</summary>
    public const int PvVoltageFieldNumber = 26;
    private float pvVoltage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PvVoltage {
      get { return pvVoltage_; }
      set {
        pvVoltage_ = value;
      }
    }

    /// <summary>Field number for the "pvAmpare" field.</summary>
    public const int PvAmpareFieldNumber = 27;
    private float pvAmpare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PvAmpare {
      get { return pvAmpare_; }
      set {
        pvAmpare_ = value;
      }
    }

    /// <summary>Field number for the "windPower" field.</summary>
    public const int WindPowerFieldNumber = 28;
    private float windPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WindPower {
      get { return windPower_; }
      set {
        windPower_ = value;
      }
    }

    /// <summary>Field number for the "pvPower" field.</summary>
    public const int PvPowerFieldNumber = 29;
    private float pvPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PvPower {
      get { return pvPower_; }
      set {
        pvPower_ = value;
      }
    }

    /// <summary>Field number for the "Led1Voltage" field.</summary>
    public const int Led1VoltageFieldNumber = 30;
    private float led1Voltage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Led1Voltage {
      get { return led1Voltage_; }
      set {
        led1Voltage_ = value;
      }
    }

    /// <summary>Field number for the "Led1Ampare" field.</summary>
    public const int Led1AmpareFieldNumber = 31;
    private float led1Ampare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Led1Ampare {
      get { return led1Ampare_; }
      set {
        led1Ampare_ = value;
      }
    }

    /// <summary>Field number for the "Led2Voltage" field.</summary>
    public const int Led2VoltageFieldNumber = 32;
    private float led2Voltage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Led2Voltage {
      get { return led2Voltage_; }
      set {
        led2Voltage_ = value;
      }
    }

    /// <summary>Field number for the "Led2Ampare" field.</summary>
    public const int Led2AmpareFieldNumber = 33;
    private float led2Ampare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Led2Ampare {
      get { return led2Ampare_; }
      set {
        led2Ampare_ = value;
      }
    }

    /// <summary>Field number for the "Led1OnTime" field.</summary>
    public const int Led1OnTimeFieldNumber = 34;
    private int led1OnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Led1OnTime {
      get { return led1OnTime_; }
      set {
        led1OnTime_ = value;
      }
    }

    /// <summary>Field number for the "Led2OnTime" field.</summary>
    public const int Led2OnTimeFieldNumber = 35;
    private int led2OnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Led2OnTime {
      get { return led2OnTime_; }
      set {
        led2OnTime_ = value;
      }
    }

    /// <summary>Field number for the "dummyLoadBrake" field.</summary>
    public const int DummyLoadBrakeFieldNumber = 36;
    private int dummyLoadBrake_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DummyLoadBrake {
      get { return dummyLoadBrake_; }
      set {
        dummyLoadBrake_ = value;
      }
    }

    /// <summary>Field number for the "lineShortBrake" field.</summary>
    public const int LineShortBrakeFieldNumber = 37;
    private int lineShortBrake_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineShortBrake {
      get { return lineShortBrake_; }
      set {
        lineShortBrake_ = value;
      }
    }

    /// <summary>Field number for the "statusBit" field.</summary>
    public const int StatusBitFieldNumber = 38;
    private int statusBit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusBit {
      get { return statusBit_; }
      set {
        statusBit_ = value;
      }
    }

    /// <summary>Field number for the "batteryChargeWindAmpare" field.</summary>
    public const int BatteryChargeWindAmpareFieldNumber = 39;
    private float batteryChargeWindAmpare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BatteryChargeWindAmpare {
      get { return batteryChargeWindAmpare_; }
      set {
        batteryChargeWindAmpare_ = value;
      }
    }

    /// <summary>Field number for the "batteryChargePvAmpare" field.</summary>
    public const int BatteryChargePvAmpareFieldNumber = 40;
    private float batteryChargePvAmpare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BatteryChargePvAmpare {
      get { return batteryChargePvAmpare_; }
      set {
        batteryChargePvAmpare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Serial != other.Serial) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryCapacity, other.BatteryCapacity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryLowVoltageSafe, other.BatteryLowVoltageSafe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WindStartBatteryVoltageAfterFullCharge, other.WindStartBatteryVoltageAfterFullCharge)) return false;
      if (NumOfWindGenPole != other.NumOfWindGenPole) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DummyLoadBrakingApplyVoltage, other.DummyLoadBrakingApplyVoltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DummyLoadBrakingClearVoltage, other.DummyLoadBrakingClearVoltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShortBrakingApplyVoltage, other.ShortBrakingApplyVoltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ShortBrakingClearVoltage, other.ShortBrakingClearVoltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DummyLoadBrakingApplyRpm, other.DummyLoadBrakingApplyRpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DummyLoadBrakingClearRpm, other.DummyLoadBrakingClearRpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LineShortBrakingApplyRpm, other.LineShortBrakingApplyRpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LineShortBrakingClearRpm, other.LineShortBrakingClearRpm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Led1OnCondition, other.Led1OnCondition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Led1OffCondition, other.Led1OffCondition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Led2OnCondition, other.Led2OnCondition)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Led2OffCondition, other.Led2OffCondition)) return false;
      if (Led1OnOffMethod != other.Led1OnOffMethod) return false;
      if (Led2OnOffMethod != other.Led2OnOffMethod) return false;
      if (Led1MaxOnTime != other.Led1MaxOnTime) return false;
      if (Led2MaxOnTime != other.Led2MaxOnTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryAmpare, other.BatteryAmpare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryVoltage, other.BatteryVoltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WindGenVoltage, other.WindGenVoltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WindGenAmpare, other.WindGenAmpare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PvVoltage, other.PvVoltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PvAmpare, other.PvAmpare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WindPower, other.WindPower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PvPower, other.PvPower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Led1Voltage, other.Led1Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Led1Ampare, other.Led1Ampare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Led2Voltage, other.Led2Voltage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Led2Ampare, other.Led2Ampare)) return false;
      if (Led1OnTime != other.Led1OnTime) return false;
      if (Led2OnTime != other.Led2OnTime) return false;
      if (DummyLoadBrake != other.DummyLoadBrake) return false;
      if (LineShortBrake != other.LineShortBrake) return false;
      if (StatusBit != other.StatusBit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryChargeWindAmpare, other.BatteryChargeWindAmpare)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryChargePvAmpare, other.BatteryChargePvAmpare)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (BatteryCapacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryCapacity);
      if (BatteryLowVoltageSafe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryLowVoltageSafe);
      if (WindStartBatteryVoltageAfterFullCharge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WindStartBatteryVoltageAfterFullCharge);
      if (NumOfWindGenPole != 0) hash ^= NumOfWindGenPole.GetHashCode();
      if (DummyLoadBrakingApplyVoltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DummyLoadBrakingApplyVoltage);
      if (DummyLoadBrakingClearVoltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DummyLoadBrakingClearVoltage);
      if (ShortBrakingApplyVoltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShortBrakingApplyVoltage);
      if (ShortBrakingClearVoltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ShortBrakingClearVoltage);
      if (DummyLoadBrakingApplyRpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DummyLoadBrakingApplyRpm);
      if (DummyLoadBrakingClearRpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DummyLoadBrakingClearRpm);
      if (LineShortBrakingApplyRpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LineShortBrakingApplyRpm);
      if (LineShortBrakingClearRpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LineShortBrakingClearRpm);
      if (Led1OnCondition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Led1OnCondition);
      if (Led1OffCondition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Led1OffCondition);
      if (Led2OnCondition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Led2OnCondition);
      if (Led2OffCondition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Led2OffCondition);
      if (Led1OnOffMethod != 0) hash ^= Led1OnOffMethod.GetHashCode();
      if (Led2OnOffMethod != 0) hash ^= Led2OnOffMethod.GetHashCode();
      if (Led1MaxOnTime != 0) hash ^= Led1MaxOnTime.GetHashCode();
      if (Led2MaxOnTime != 0) hash ^= Led2MaxOnTime.GetHashCode();
      if (BatteryAmpare != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryAmpare);
      if (BatteryVoltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryVoltage);
      if (WindGenVoltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WindGenVoltage);
      if (WindGenAmpare != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WindGenAmpare);
      if (PvVoltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PvVoltage);
      if (PvAmpare != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PvAmpare);
      if (WindPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WindPower);
      if (PvPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PvPower);
      if (Led1Voltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Led1Voltage);
      if (Led1Ampare != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Led1Ampare);
      if (Led2Voltage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Led2Voltage);
      if (Led2Ampare != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Led2Ampare);
      if (Led1OnTime != 0) hash ^= Led1OnTime.GetHashCode();
      if (Led2OnTime != 0) hash ^= Led2OnTime.GetHashCode();
      if (DummyLoadBrake != 0) hash ^= DummyLoadBrake.GetHashCode();
      if (LineShortBrake != 0) hash ^= LineShortBrake.GetHashCode();
      if (StatusBit != 0) hash ^= StatusBit.GetHashCode();
      if (BatteryChargeWindAmpare != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryChargeWindAmpare);
      if (BatteryChargePvAmpare != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryChargePvAmpare);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Serial.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Serial);
      }
      if (BatteryCapacity != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BatteryCapacity);
      }
      if (BatteryLowVoltageSafe != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BatteryLowVoltageSafe);
      }
      if (WindStartBatteryVoltageAfterFullCharge != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(WindStartBatteryVoltageAfterFullCharge);
      }
      if (NumOfWindGenPole != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NumOfWindGenPole);
      }
      if (DummyLoadBrakingApplyVoltage != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DummyLoadBrakingApplyVoltage);
      }
      if (DummyLoadBrakingClearVoltage != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DummyLoadBrakingClearVoltage);
      }
      if (ShortBrakingApplyVoltage != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ShortBrakingApplyVoltage);
      }
      if (ShortBrakingClearVoltage != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ShortBrakingClearVoltage);
      }
      if (DummyLoadBrakingApplyRpm != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(DummyLoadBrakingApplyRpm);
      }
      if (DummyLoadBrakingClearRpm != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DummyLoadBrakingClearRpm);
      }
      if (LineShortBrakingApplyRpm != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(LineShortBrakingApplyRpm);
      }
      if (LineShortBrakingClearRpm != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(LineShortBrakingClearRpm);
      }
      if (Led1OnCondition != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Led1OnCondition);
      }
      if (Led1OffCondition != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Led1OffCondition);
      }
      if (Led2OnCondition != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Led2OnCondition);
      }
      if (Led2OffCondition != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(Led2OffCondition);
      }
      if (Led1OnOffMethod != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Led1OnOffMethod);
      }
      if (Led2OnOffMethod != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Led2OnOffMethod);
      }
      if (Led1MaxOnTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Led1MaxOnTime);
      }
      if (Led2MaxOnTime != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Led2MaxOnTime);
      }
      if (BatteryAmpare != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(BatteryAmpare);
      }
      if (BatteryVoltage != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(BatteryVoltage);
      }
      if (WindGenVoltage != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(WindGenVoltage);
      }
      if (WindGenAmpare != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(WindGenAmpare);
      }
      if (PvVoltage != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(PvVoltage);
      }
      if (PvAmpare != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(PvAmpare);
      }
      if (WindPower != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(WindPower);
      }
      if (PvPower != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(PvPower);
      }
      if (Led1Voltage != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(Led1Voltage);
      }
      if (Led1Ampare != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(Led1Ampare);
      }
      if (Led2Voltage != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(Led2Voltage);
      }
      if (Led2Ampare != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(Led2Ampare);
      }
      if (Led1OnTime != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Led1OnTime);
      }
      if (Led2OnTime != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(Led2OnTime);
      }
      if (DummyLoadBrake != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(DummyLoadBrake);
      }
      if (LineShortBrake != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(LineShortBrake);
      }
      if (StatusBit != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(StatusBit);
      }
      if (BatteryChargeWindAmpare != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(BatteryChargeWindAmpare);
      }
      if (BatteryChargePvAmpare != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(BatteryChargePvAmpare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (BatteryCapacity != 0F) {
        size += 1 + 4;
      }
      if (BatteryLowVoltageSafe != 0F) {
        size += 1 + 4;
      }
      if (WindStartBatteryVoltageAfterFullCharge != 0F) {
        size += 1 + 4;
      }
      if (NumOfWindGenPole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumOfWindGenPole);
      }
      if (DummyLoadBrakingApplyVoltage != 0F) {
        size += 1 + 4;
      }
      if (DummyLoadBrakingClearVoltage != 0F) {
        size += 1 + 4;
      }
      if (ShortBrakingApplyVoltage != 0F) {
        size += 1 + 4;
      }
      if (ShortBrakingClearVoltage != 0F) {
        size += 1 + 4;
      }
      if (DummyLoadBrakingApplyRpm != 0F) {
        size += 1 + 4;
      }
      if (DummyLoadBrakingClearRpm != 0F) {
        size += 1 + 4;
      }
      if (LineShortBrakingApplyRpm != 0F) {
        size += 1 + 4;
      }
      if (LineShortBrakingClearRpm != 0F) {
        size += 1 + 4;
      }
      if (Led1OnCondition != 0F) {
        size += 1 + 4;
      }
      if (Led1OffCondition != 0F) {
        size += 1 + 4;
      }
      if (Led2OnCondition != 0F) {
        size += 2 + 4;
      }
      if (Led2OffCondition != 0F) {
        size += 2 + 4;
      }
      if (Led1OnOffMethod != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Led1OnOffMethod);
      }
      if (Led2OnOffMethod != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Led2OnOffMethod);
      }
      if (Led1MaxOnTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Led1MaxOnTime);
      }
      if (Led2MaxOnTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Led2MaxOnTime);
      }
      if (BatteryAmpare != 0F) {
        size += 2 + 4;
      }
      if (BatteryVoltage != 0F) {
        size += 2 + 4;
      }
      if (WindGenVoltage != 0F) {
        size += 2 + 4;
      }
      if (WindGenAmpare != 0F) {
        size += 2 + 4;
      }
      if (PvVoltage != 0F) {
        size += 2 + 4;
      }
      if (PvAmpare != 0F) {
        size += 2 + 4;
      }
      if (WindPower != 0F) {
        size += 2 + 4;
      }
      if (PvPower != 0F) {
        size += 2 + 4;
      }
      if (Led1Voltage != 0F) {
        size += 2 + 4;
      }
      if (Led1Ampare != 0F) {
        size += 2 + 4;
      }
      if (Led2Voltage != 0F) {
        size += 2 + 4;
      }
      if (Led2Ampare != 0F) {
        size += 2 + 4;
      }
      if (Led1OnTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Led1OnTime);
      }
      if (Led2OnTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Led2OnTime);
      }
      if (DummyLoadBrake != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DummyLoadBrake);
      }
      if (LineShortBrake != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LineShortBrake);
      }
      if (StatusBit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StatusBit);
      }
      if (BatteryChargeWindAmpare != 0F) {
        size += 2 + 4;
      }
      if (BatteryChargePvAmpare != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenData other) {
      if (other == null) {
        return;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.BatteryCapacity != 0F) {
        BatteryCapacity = other.BatteryCapacity;
      }
      if (other.BatteryLowVoltageSafe != 0F) {
        BatteryLowVoltageSafe = other.BatteryLowVoltageSafe;
      }
      if (other.WindStartBatteryVoltageAfterFullCharge != 0F) {
        WindStartBatteryVoltageAfterFullCharge = other.WindStartBatteryVoltageAfterFullCharge;
      }
      if (other.NumOfWindGenPole != 0) {
        NumOfWindGenPole = other.NumOfWindGenPole;
      }
      if (other.DummyLoadBrakingApplyVoltage != 0F) {
        DummyLoadBrakingApplyVoltage = other.DummyLoadBrakingApplyVoltage;
      }
      if (other.DummyLoadBrakingClearVoltage != 0F) {
        DummyLoadBrakingClearVoltage = other.DummyLoadBrakingClearVoltage;
      }
      if (other.ShortBrakingApplyVoltage != 0F) {
        ShortBrakingApplyVoltage = other.ShortBrakingApplyVoltage;
      }
      if (other.ShortBrakingClearVoltage != 0F) {
        ShortBrakingClearVoltage = other.ShortBrakingClearVoltage;
      }
      if (other.DummyLoadBrakingApplyRpm != 0F) {
        DummyLoadBrakingApplyRpm = other.DummyLoadBrakingApplyRpm;
      }
      if (other.DummyLoadBrakingClearRpm != 0F) {
        DummyLoadBrakingClearRpm = other.DummyLoadBrakingClearRpm;
      }
      if (other.LineShortBrakingApplyRpm != 0F) {
        LineShortBrakingApplyRpm = other.LineShortBrakingApplyRpm;
      }
      if (other.LineShortBrakingClearRpm != 0F) {
        LineShortBrakingClearRpm = other.LineShortBrakingClearRpm;
      }
      if (other.Led1OnCondition != 0F) {
        Led1OnCondition = other.Led1OnCondition;
      }
      if (other.Led1OffCondition != 0F) {
        Led1OffCondition = other.Led1OffCondition;
      }
      if (other.Led2OnCondition != 0F) {
        Led2OnCondition = other.Led2OnCondition;
      }
      if (other.Led2OffCondition != 0F) {
        Led2OffCondition = other.Led2OffCondition;
      }
      if (other.Led1OnOffMethod != 0) {
        Led1OnOffMethod = other.Led1OnOffMethod;
      }
      if (other.Led2OnOffMethod != 0) {
        Led2OnOffMethod = other.Led2OnOffMethod;
      }
      if (other.Led1MaxOnTime != 0) {
        Led1MaxOnTime = other.Led1MaxOnTime;
      }
      if (other.Led2MaxOnTime != 0) {
        Led2MaxOnTime = other.Led2MaxOnTime;
      }
      if (other.BatteryAmpare != 0F) {
        BatteryAmpare = other.BatteryAmpare;
      }
      if (other.BatteryVoltage != 0F) {
        BatteryVoltage = other.BatteryVoltage;
      }
      if (other.WindGenVoltage != 0F) {
        WindGenVoltage = other.WindGenVoltage;
      }
      if (other.WindGenAmpare != 0F) {
        WindGenAmpare = other.WindGenAmpare;
      }
      if (other.PvVoltage != 0F) {
        PvVoltage = other.PvVoltage;
      }
      if (other.PvAmpare != 0F) {
        PvAmpare = other.PvAmpare;
      }
      if (other.WindPower != 0F) {
        WindPower = other.WindPower;
      }
      if (other.PvPower != 0F) {
        PvPower = other.PvPower;
      }
      if (other.Led1Voltage != 0F) {
        Led1Voltage = other.Led1Voltage;
      }
      if (other.Led1Ampare != 0F) {
        Led1Ampare = other.Led1Ampare;
      }
      if (other.Led2Voltage != 0F) {
        Led2Voltage = other.Led2Voltage;
      }
      if (other.Led2Ampare != 0F) {
        Led2Ampare = other.Led2Ampare;
      }
      if (other.Led1OnTime != 0) {
        Led1OnTime = other.Led1OnTime;
      }
      if (other.Led2OnTime != 0) {
        Led2OnTime = other.Led2OnTime;
      }
      if (other.DummyLoadBrake != 0) {
        DummyLoadBrake = other.DummyLoadBrake;
      }
      if (other.LineShortBrake != 0) {
        LineShortBrake = other.LineShortBrake;
      }
      if (other.StatusBit != 0) {
        StatusBit = other.StatusBit;
      }
      if (other.BatteryChargeWindAmpare != 0F) {
        BatteryChargeWindAmpare = other.BatteryChargeWindAmpare;
      }
      if (other.BatteryChargePvAmpare != 0F) {
        BatteryChargePvAmpare = other.BatteryChargePvAmpare;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Serial = input.ReadString();
            break;
          }
          case 21: {
            BatteryCapacity = input.ReadFloat();
            break;
          }
          case 29: {
            BatteryLowVoltageSafe = input.ReadFloat();
            break;
          }
          case 37: {
            WindStartBatteryVoltageAfterFullCharge = input.ReadFloat();
            break;
          }
          case 40: {
            NumOfWindGenPole = input.ReadInt32();
            break;
          }
          case 53: {
            DummyLoadBrakingApplyVoltage = input.ReadFloat();
            break;
          }
          case 61: {
            DummyLoadBrakingClearVoltage = input.ReadFloat();
            break;
          }
          case 69: {
            ShortBrakingApplyVoltage = input.ReadFloat();
            break;
          }
          case 77: {
            ShortBrakingClearVoltage = input.ReadFloat();
            break;
          }
          case 85: {
            DummyLoadBrakingApplyRpm = input.ReadFloat();
            break;
          }
          case 93: {
            DummyLoadBrakingClearRpm = input.ReadFloat();
            break;
          }
          case 101: {
            LineShortBrakingApplyRpm = input.ReadFloat();
            break;
          }
          case 109: {
            LineShortBrakingClearRpm = input.ReadFloat();
            break;
          }
          case 117: {
            Led1OnCondition = input.ReadFloat();
            break;
          }
          case 125: {
            Led1OffCondition = input.ReadFloat();
            break;
          }
          case 133: {
            Led2OnCondition = input.ReadFloat();
            break;
          }
          case 141: {
            Led2OffCondition = input.ReadFloat();
            break;
          }
          case 144: {
            Led1OnOffMethod = input.ReadInt32();
            break;
          }
          case 152: {
            Led2OnOffMethod = input.ReadInt32();
            break;
          }
          case 160: {
            Led1MaxOnTime = input.ReadInt32();
            break;
          }
          case 168: {
            Led2MaxOnTime = input.ReadInt32();
            break;
          }
          case 181: {
            BatteryAmpare = input.ReadFloat();
            break;
          }
          case 189: {
            BatteryVoltage = input.ReadFloat();
            break;
          }
          case 197: {
            WindGenVoltage = input.ReadFloat();
            break;
          }
          case 205: {
            WindGenAmpare = input.ReadFloat();
            break;
          }
          case 213: {
            PvVoltage = input.ReadFloat();
            break;
          }
          case 221: {
            PvAmpare = input.ReadFloat();
            break;
          }
          case 229: {
            WindPower = input.ReadFloat();
            break;
          }
          case 237: {
            PvPower = input.ReadFloat();
            break;
          }
          case 245: {
            Led1Voltage = input.ReadFloat();
            break;
          }
          case 253: {
            Led1Ampare = input.ReadFloat();
            break;
          }
          case 261: {
            Led2Voltage = input.ReadFloat();
            break;
          }
          case 269: {
            Led2Ampare = input.ReadFloat();
            break;
          }
          case 272: {
            Led1OnTime = input.ReadInt32();
            break;
          }
          case 280: {
            Led2OnTime = input.ReadInt32();
            break;
          }
          case 288: {
            DummyLoadBrake = input.ReadInt32();
            break;
          }
          case 296: {
            LineShortBrake = input.ReadInt32();
            break;
          }
          case 304: {
            StatusBit = input.ReadInt32();
            break;
          }
          case 317: {
            BatteryChargeWindAmpare = input.ReadFloat();
            break;
          }
          case 325: {
            BatteryChargePvAmpare = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenDataStartRequest : pb::IMessage<GenDataStartRequest> {
    private static readonly pb::MessageParser<GenDataStartRequest> _parser = new pb::MessageParser<GenDataStartRequest>(() => new GenDataStartRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenDataStartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStartRequest(GenDataStartRequest other) : this() {
      accessToken_ = other.accessToken_;
      serial_ = other.serial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStartRequest Clone() {
      return new GenDataStartRequest(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenDataStartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenDataStartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (Serial != other.Serial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Serial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenDataStartRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
          case 18: {
            Serial = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenDataStartResponse : pb::IMessage<GenDataStartResponse> {
    private static readonly pb::MessageParser<GenDataStartResponse> _parser = new pb::MessageParser<GenDataStartResponse>(() => new GenDataStartResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenDataStartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStartResponse(GenDataStartResponse other) : this() {
      result_ = other.result_;
      accessToken_ = other.accessToken_;
      serial_ = other.serial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStartResponse Clone() {
      return new GenDataStartResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Circular2.Result result_ = global::Circular2.Result.Success;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 2;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 3;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenDataStartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenDataStartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (AccessToken != other.AccessToken) return false;
      if (Serial != other.Serial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Circular2.Result.Success) hash ^= Result.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Circular2.Result.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccessToken);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Serial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Circular2.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenDataStartResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Circular2.Result.Success) {
        Result = other.Result;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Circular2.Result) input.ReadEnum();
            break;
          }
          case 18: {
            AccessToken = input.ReadString();
            break;
          }
          case 26: {
            Serial = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenDataStopRequest : pb::IMessage<GenDataStopRequest> {
    private static readonly pb::MessageParser<GenDataStopRequest> _parser = new pb::MessageParser<GenDataStopRequest>(() => new GenDataStopRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenDataStopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStopRequest(GenDataStopRequest other) : this() {
      accessToken_ = other.accessToken_;
      serial_ = other.serial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStopRequest Clone() {
      return new GenDataStopRequest(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenDataStopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenDataStopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (Serial != other.Serial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Serial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenDataStopRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
          case 18: {
            Serial = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenDataStopResponse : pb::IMessage<GenDataStopResponse> {
    private static readonly pb::MessageParser<GenDataStopResponse> _parser = new pb::MessageParser<GenDataStopResponse>(() => new GenDataStopResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenDataStopResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStopResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStopResponse(GenDataStopResponse other) : this() {
      result_ = other.result_;
      accessToken_ = other.accessToken_;
      serial_ = other.serial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenDataStopResponse Clone() {
      return new GenDataStopResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Circular2.Result result_ = global::Circular2.Result.Success;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 2;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 3;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenDataStopResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenDataStopResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (AccessToken != other.AccessToken) return false;
      if (Serial != other.Serial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Circular2.Result.Success) hash ^= Result.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Circular2.Result.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccessToken);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Serial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Circular2.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenDataStopResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Circular2.Result.Success) {
        Result = other.Result;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Circular2.Result) input.ReadEnum();
            break;
          }
          case 18: {
            AccessToken = input.ReadString();
            break;
          }
          case 26: {
            Serial = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegistrationStationRequest : pb::IMessage<RegistrationStationRequest> {
    private static readonly pb::MessageParser<RegistrationStationRequest> _parser = new pb::MessageParser<RegistrationStationRequest>(() => new RegistrationStationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistrationStationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationStationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationStationRequest(RegistrationStationRequest other) : this() {
      serial_ = other.serial_;
      mac_ = other.mac_;
      swVersion_ = other.swVersion_;
      hwVersion_ = other.hwVersion_;
      priIP_ = other.priIP_;
      priPort_ = other.priPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationStationRequest Clone() {
      return new RegistrationStationRequest(this);
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 1;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac" field.</summary>
    public const int MacFieldNumber = 2;
    private string mac_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mac {
      get { return mac_; }
      set {
        mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "swVersion" field.</summary>
    public const int SwVersionFieldNumber = 3;
    private string swVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SwVersion {
      get { return swVersion_; }
      set {
        swVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hwVersion" field.</summary>
    public const int HwVersionFieldNumber = 4;
    private string hwVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HwVersion {
      get { return hwVersion_; }
      set {
        hwVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priIP" field.</summary>
    public const int PriIPFieldNumber = 5;
    private string priIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PriIP {
      get { return priIP_; }
      set {
        priIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priPort" field.</summary>
    public const int PriPortFieldNumber = 6;
    private int priPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriPort {
      get { return priPort_; }
      set {
        priPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistrationStationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistrationStationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Serial != other.Serial) return false;
      if (Mac != other.Mac) return false;
      if (SwVersion != other.SwVersion) return false;
      if (HwVersion != other.HwVersion) return false;
      if (PriIP != other.PriIP) return false;
      if (PriPort != other.PriPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (Mac.Length != 0) hash ^= Mac.GetHashCode();
      if (SwVersion.Length != 0) hash ^= SwVersion.GetHashCode();
      if (HwVersion.Length != 0) hash ^= HwVersion.GetHashCode();
      if (PriIP.Length != 0) hash ^= PriIP.GetHashCode();
      if (PriPort != 0) hash ^= PriPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Serial.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Serial);
      }
      if (Mac.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mac);
      }
      if (SwVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SwVersion);
      }
      if (HwVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HwVersion);
      }
      if (PriIP.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PriIP);
      }
      if (PriPort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PriPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (Mac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
      }
      if (SwVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SwVersion);
      }
      if (HwVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HwVersion);
      }
      if (PriIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PriIP);
      }
      if (PriPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistrationStationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.Mac.Length != 0) {
        Mac = other.Mac;
      }
      if (other.SwVersion.Length != 0) {
        SwVersion = other.SwVersion;
      }
      if (other.HwVersion.Length != 0) {
        HwVersion = other.HwVersion;
      }
      if (other.PriIP.Length != 0) {
        PriIP = other.PriIP;
      }
      if (other.PriPort != 0) {
        PriPort = other.PriPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Serial = input.ReadString();
            break;
          }
          case 18: {
            Mac = input.ReadString();
            break;
          }
          case 26: {
            SwVersion = input.ReadString();
            break;
          }
          case 34: {
            HwVersion = input.ReadString();
            break;
          }
          case 42: {
            PriIP = input.ReadString();
            break;
          }
          case 48: {
            PriPort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegistrationStationResponse : pb::IMessage<RegistrationStationResponse> {
    private static readonly pb::MessageParser<RegistrationStationResponse> _parser = new pb::MessageParser<RegistrationStationResponse>(() => new RegistrationStationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistrationStationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationStationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationStationResponse(RegistrationStationResponse other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationStationResponse Clone() {
      return new RegistrationStationResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Circular2.Result result_ = global::Circular2.Result.Success;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistrationStationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistrationStationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Circular2.Result.Success) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Circular2.Result.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Circular2.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistrationStationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Circular2.Result.Success) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Circular2.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegistrationViewerRequest : pb::IMessage<RegistrationViewerRequest> {
    private static readonly pb::MessageParser<RegistrationViewerRequest> _parser = new pb::MessageParser<RegistrationViewerRequest>(() => new RegistrationViewerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistrationViewerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationViewerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationViewerRequest(RegistrationViewerRequest other) : this() {
      serial_ = other.serial_;
      swVersion_ = other.swVersion_;
      priIP_ = other.priIP_;
      priPort_ = other.priPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationViewerRequest Clone() {
      return new RegistrationViewerRequest(this);
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 1;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "swVersion" field.</summary>
    public const int SwVersionFieldNumber = 2;
    private string swVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SwVersion {
      get { return swVersion_; }
      set {
        swVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priIP" field.</summary>
    public const int PriIPFieldNumber = 3;
    private string priIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PriIP {
      get { return priIP_; }
      set {
        priIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priPort" field.</summary>
    public const int PriPortFieldNumber = 4;
    private int priPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PriPort {
      get { return priPort_; }
      set {
        priPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistrationViewerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistrationViewerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Serial != other.Serial) return false;
      if (SwVersion != other.SwVersion) return false;
      if (PriIP != other.PriIP) return false;
      if (PriPort != other.PriPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (SwVersion.Length != 0) hash ^= SwVersion.GetHashCode();
      if (PriIP.Length != 0) hash ^= PriIP.GetHashCode();
      if (PriPort != 0) hash ^= PriPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Serial.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Serial);
      }
      if (SwVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SwVersion);
      }
      if (PriIP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PriIP);
      }
      if (PriPort != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PriPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (SwVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SwVersion);
      }
      if (PriIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PriIP);
      }
      if (PriPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistrationViewerRequest other) {
      if (other == null) {
        return;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.SwVersion.Length != 0) {
        SwVersion = other.SwVersion;
      }
      if (other.PriIP.Length != 0) {
        PriIP = other.PriIP;
      }
      if (other.PriPort != 0) {
        PriPort = other.PriPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Serial = input.ReadString();
            break;
          }
          case 18: {
            SwVersion = input.ReadString();
            break;
          }
          case 26: {
            PriIP = input.ReadString();
            break;
          }
          case 32: {
            PriPort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegistrationViewerResponse : pb::IMessage<RegistrationViewerResponse> {
    private static readonly pb::MessageParser<RegistrationViewerResponse> _parser = new pb::MessageParser<RegistrationViewerResponse>(() => new RegistrationViewerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistrationViewerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationViewerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationViewerResponse(RegistrationViewerResponse other) : this() {
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistrationViewerResponse Clone() {
      return new RegistrationViewerResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Circular2.Result result_ = global::Circular2.Result.Success;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistrationViewerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistrationViewerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Circular2.Result.Success) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Circular2.Result.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Circular2.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistrationViewerResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Circular2.Result.Success) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Circular2.Result) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamingStartRequest : pb::IMessage<StreamingStartRequest> {
    private static readonly pb::MessageParser<StreamingStartRequest> _parser = new pb::MessageParser<StreamingStartRequest>(() => new StreamingStartRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamingStartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStartRequest(StreamingStartRequest other) : this() {
      accessToken_ = other.accessToken_;
      serial_ = other.serial_;
      uts_ = other.uts_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStartRequest Clone() {
      return new StreamingStartRequest(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uts" field.</summary>
    public const int UtsFieldNumber = 3;
    private ulong uts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uts {
      get { return uts_; }
      set {
        uts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamingStartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamingStartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (Serial != other.Serial) return false;
      if (Uts != other.Uts) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (Uts != 0UL) hash ^= Uts.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Serial);
      }
      if (Uts != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Uts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (Uts != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uts);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamingStartRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.Uts != 0UL) {
        Uts = other.Uts;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
          case 18: {
            Serial = input.ReadString();
            break;
          }
          case 24: {
            Uts = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamingStartResponse : pb::IMessage<StreamingStartResponse> {
    private static readonly pb::MessageParser<StreamingStartResponse> _parser = new pb::MessageParser<StreamingStartResponse>(() => new StreamingStartResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamingStartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStartResponse(StreamingStartResponse other) : this() {
      result_ = other.result_;
      serial_ = other.serial_;
      uts_ = other.uts_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStartResponse Clone() {
      return new StreamingStartResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Circular2.Result result_ = global::Circular2.Result.Success;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uts" field.</summary>
    public const int UtsFieldNumber = 3;
    private ulong uts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uts {
      get { return uts_; }
      set {
        uts_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamingStartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamingStartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Serial != other.Serial) return false;
      if (Uts != other.Uts) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Circular2.Result.Success) hash ^= Result.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (Uts != 0UL) hash ^= Uts.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Circular2.Result.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Serial);
      }
      if (Uts != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Uts);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Circular2.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (Uts != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uts);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamingStartResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Circular2.Result.Success) {
        Result = other.Result;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.Uts != 0UL) {
        Uts = other.Uts;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Circular2.Result) input.ReadEnum();
            break;
          }
          case 18: {
            Serial = input.ReadString();
            break;
          }
          case 24: {
            Uts = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamingStopRequest : pb::IMessage<StreamingStopRequest> {
    private static readonly pb::MessageParser<StreamingStopRequest> _parser = new pb::MessageParser<StreamingStopRequest>(() => new StreamingStopRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamingStopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStopRequest(StreamingStopRequest other) : this() {
      accessToken_ = other.accessToken_;
      serial_ = other.serial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStopRequest Clone() {
      return new StreamingStopRequest(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamingStopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamingStopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (Serial != other.Serial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Serial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamingStopRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
          case 18: {
            Serial = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamingStopResponse : pb::IMessage<StreamingStopResponse> {
    private static readonly pb::MessageParser<StreamingStopResponse> _parser = new pb::MessageParser<StreamingStopResponse>(() => new StreamingStopResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamingStopResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStopResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStopResponse(StreamingStopResponse other) : this() {
      result_ = other.result_;
      serial_ = other.serial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamingStopResponse Clone() {
      return new StreamingStopResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Circular2.Result result_ = global::Circular2.Result.Success;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamingStopResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamingStopResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Serial != other.Serial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Circular2.Result.Success) hash ^= Result.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Circular2.Result.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Serial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Circular2.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamingStopResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Circular2.Result.Success) {
        Result = other.Result;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Circular2.Result) input.ReadEnum();
            break;
          }
          case 18: {
            Serial = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VideoBroken : pb::IMessage<VideoBroken> {
    private static readonly pb::MessageParser<VideoBroken> _parser = new pb::MessageParser<VideoBroken>(() => new VideoBroken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VideoBroken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoBroken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoBroken(VideoBroken other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VideoBroken Clone() {
      return new VideoBroken(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VideoBroken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VideoBroken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VideoBroken other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AuthStation : pb::IMessage<AuthStation> {
    private static readonly pb::MessageParser<AuthStation> _parser = new pb::MessageParser<AuthStation>(() => new AuthStation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthStation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthStation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthStation(AuthStation other) : this() {
      name_ = other.name_;
      sharing_ = other.sharing_;
      update_ = other.update_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthStation Clone() {
      return new AuthStation(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private bool name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "sharing" field.</summary>
    public const int SharingFieldNumber = 2;
    private bool sharing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sharing {
      get { return sharing_; }
      set {
        sharing_ = value;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 3;
    private bool update_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Update {
      get { return update_; }
      set {
        update_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthStation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthStation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Sharing != other.Sharing) return false;
      if (Update != other.Update) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name != false) hash ^= Name.GetHashCode();
      if (Sharing != false) hash ^= Sharing.GetHashCode();
      if (Update != false) hash ^= Update.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name != false) {
        output.WriteRawTag(8);
        output.WriteBool(Name);
      }
      if (Sharing != false) {
        output.WriteRawTag(16);
        output.WriteBool(Sharing);
      }
      if (Update != false) {
        output.WriteRawTag(24);
        output.WriteBool(Update);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name != false) {
        size += 1 + 1;
      }
      if (Sharing != false) {
        size += 1 + 1;
      }
      if (Update != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthStation other) {
      if (other == null) {
        return;
      }
      if (other.Name != false) {
        Name = other.Name;
      }
      if (other.Sharing != false) {
        Sharing = other.Sharing;
      }
      if (other.Update != false) {
        Update = other.Update;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Name = input.ReadBool();
            break;
          }
          case 16: {
            Sharing = input.ReadBool();
            break;
          }
          case 24: {
            Update = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Station : pb::IMessage<Station> {
    private static readonly pb::MessageParser<Station> _parser = new pb::MessageParser<Station>(() => new Station());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Station> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Station() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Station(Station other) : this() {
      name_ = other.name_;
      mac_ = other.mac_;
      owner_ = other.owner_;
      publicIP_ = other.publicIP_;
      publicPort_ = other.publicPort_;
      privateIP_ = other.privateIP_;
      privatePort_ = other.privatePort_;
      ping_ = other.ping_;
      regDate_ = other.regDate_;
      swVersion_ = other.swVersion_;
      hwVersion_ = other.hwVersion_;
      cameraName_ = other.cameraName_;
      serial_ = other.serial_;
      auth_ = other.auth_ != null ? other.auth_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Station Clone() {
      return new Station(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac" field.</summary>
    public const int MacFieldNumber = 2;
    private string mac_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mac {
      get { return mac_; }
      set {
        mac_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private string owner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicIP" field.</summary>
    public const int PublicIPFieldNumber = 4;
    private string publicIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicIP {
      get { return publicIP_; }
      set {
        publicIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publicPort" field.</summary>
    public const int PublicPortFieldNumber = 5;
    private int publicPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicPort {
      get { return publicPort_; }
      set {
        publicPort_ = value;
      }
    }

    /// <summary>Field number for the "privateIP" field.</summary>
    public const int PrivateIPFieldNumber = 6;
    private string privateIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateIP {
      get { return privateIP_; }
      set {
        privateIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "privatePort" field.</summary>
    public const int PrivatePortFieldNumber = 7;
    private int privatePort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrivatePort {
      get { return privatePort_; }
      set {
        privatePort_ = value;
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 8;
    private uint ping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ping {
      get { return ping_; }
      set {
        ping_ = value;
      }
    }

    /// <summary>Field number for the "regDate" field.</summary>
    public const int RegDateFieldNumber = 9;
    private string regDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegDate {
      get { return regDate_; }
      set {
        regDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "swVersion" field.</summary>
    public const int SwVersionFieldNumber = 10;
    private string swVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SwVersion {
      get { return swVersion_; }
      set {
        swVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hwVersion" field.</summary>
    public const int HwVersionFieldNumber = 11;
    private string hwVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HwVersion {
      get { return hwVersion_; }
      set {
        hwVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cameraName" field.</summary>
    public const int CameraNameFieldNumber = 12;
    private string cameraName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraName {
      get { return cameraName_; }
      set {
        cameraName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 13;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth" field.</summary>
    public const int AuthFieldNumber = 14;
    private global::Circular2.AuthStation auth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.AuthStation Auth {
      get { return auth_; }
      set {
        auth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Station);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Station other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Mac != other.Mac) return false;
      if (Owner != other.Owner) return false;
      if (PublicIP != other.PublicIP) return false;
      if (PublicPort != other.PublicPort) return false;
      if (PrivateIP != other.PrivateIP) return false;
      if (PrivatePort != other.PrivatePort) return false;
      if (Ping != other.Ping) return false;
      if (RegDate != other.RegDate) return false;
      if (SwVersion != other.SwVersion) return false;
      if (HwVersion != other.HwVersion) return false;
      if (CameraName != other.CameraName) return false;
      if (Serial != other.Serial) return false;
      if (!object.Equals(Auth, other.Auth)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Mac.Length != 0) hash ^= Mac.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (PublicIP.Length != 0) hash ^= PublicIP.GetHashCode();
      if (PublicPort != 0) hash ^= PublicPort.GetHashCode();
      if (PrivateIP.Length != 0) hash ^= PrivateIP.GetHashCode();
      if (PrivatePort != 0) hash ^= PrivatePort.GetHashCode();
      if (Ping != 0) hash ^= Ping.GetHashCode();
      if (RegDate.Length != 0) hash ^= RegDate.GetHashCode();
      if (SwVersion.Length != 0) hash ^= SwVersion.GetHashCode();
      if (HwVersion.Length != 0) hash ^= HwVersion.GetHashCode();
      if (CameraName.Length != 0) hash ^= CameraName.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (auth_ != null) hash ^= Auth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Mac.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mac);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Owner);
      }
      if (PublicIP.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PublicIP);
      }
      if (PublicPort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PublicPort);
      }
      if (PrivateIP.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PrivateIP);
      }
      if (PrivatePort != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PrivatePort);
      }
      if (Ping != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Ping);
      }
      if (RegDate.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RegDate);
      }
      if (SwVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SwVersion);
      }
      if (HwVersion.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(HwVersion);
      }
      if (CameraName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(CameraName);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Serial);
      }
      if (auth_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Auth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Mac.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mac);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (PublicIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicIP);
      }
      if (PublicPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicPort);
      }
      if (PrivateIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateIP);
      }
      if (PrivatePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrivatePort);
      }
      if (Ping != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ping);
      }
      if (RegDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegDate);
      }
      if (SwVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SwVersion);
      }
      if (HwVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HwVersion);
      }
      if (CameraName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraName);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (auth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Auth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Station other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Mac.Length != 0) {
        Mac = other.Mac;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.PublicIP.Length != 0) {
        PublicIP = other.PublicIP;
      }
      if (other.PublicPort != 0) {
        PublicPort = other.PublicPort;
      }
      if (other.PrivateIP.Length != 0) {
        PrivateIP = other.PrivateIP;
      }
      if (other.PrivatePort != 0) {
        PrivatePort = other.PrivatePort;
      }
      if (other.Ping != 0) {
        Ping = other.Ping;
      }
      if (other.RegDate.Length != 0) {
        RegDate = other.RegDate;
      }
      if (other.SwVersion.Length != 0) {
        SwVersion = other.SwVersion;
      }
      if (other.HwVersion.Length != 0) {
        HwVersion = other.HwVersion;
      }
      if (other.CameraName.Length != 0) {
        CameraName = other.CameraName;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.auth_ != null) {
        if (auth_ == null) {
          Auth = new global::Circular2.AuthStation();
        }
        Auth.MergeFrom(other.Auth);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Mac = input.ReadString();
            break;
          }
          case 26: {
            Owner = input.ReadString();
            break;
          }
          case 34: {
            PublicIP = input.ReadString();
            break;
          }
          case 40: {
            PublicPort = input.ReadInt32();
            break;
          }
          case 50: {
            PrivateIP = input.ReadString();
            break;
          }
          case 56: {
            PrivatePort = input.ReadInt32();
            break;
          }
          case 64: {
            Ping = input.ReadUInt32();
            break;
          }
          case 74: {
            RegDate = input.ReadString();
            break;
          }
          case 82: {
            SwVersion = input.ReadString();
            break;
          }
          case 90: {
            HwVersion = input.ReadString();
            break;
          }
          case 98: {
            CameraName = input.ReadString();
            break;
          }
          case 106: {
            Serial = input.ReadString();
            break;
          }
          case 114: {
            if (auth_ == null) {
              Auth = new global::Circular2.AuthStation();
            }
            input.ReadMessage(Auth);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StationListRequest : pb::IMessage<StationListRequest> {
    private static readonly pb::MessageParser<StationListRequest> _parser = new pb::MessageParser<StationListRequest>(() => new StationListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationListRequest(StationListRequest other) : this() {
      accessToken_ = other.accessToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationListRequest Clone() {
      return new StationListRequest(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationListRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StationListResponse : pb::IMessage<StationListResponse> {
    private static readonly pb::MessageParser<StationListResponse> _parser = new pb::MessageParser<StationListResponse>(() => new StationListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationListResponse(StationListResponse other) : this() {
      result_ = other.result_;
      stationList_ = other.stationList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationListResponse Clone() {
      return new StationListResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Circular2.Result result_ = global::Circular2.Result.Success;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "stationList" field.</summary>
    public const int StationListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Circular2.Station> _repeated_stationList_codec
        = pb::FieldCodec.ForMessage(18, global::Circular2.Station.Parser);
    private readonly pbc::RepeatedField<global::Circular2.Station> stationList_ = new pbc::RepeatedField<global::Circular2.Station>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Circular2.Station> StationList {
      get { return stationList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!stationList_.Equals(other.stationList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Circular2.Result.Success) hash ^= Result.GetHashCode();
      hash ^= stationList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Circular2.Result.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      stationList_.WriteTo(output, _repeated_stationList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Circular2.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      size += stationList_.CalculateSize(_repeated_stationList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationListResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Circular2.Result.Success) {
        Result = other.Result;
      }
      stationList_.Add(other.stationList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Circular2.Result) input.ReadEnum();
            break;
          }
          case 18: {
            stationList_.AddEntriesFrom(input, _repeated_stationList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddStationRequest : pb::IMessage<AddStationRequest> {
    private static readonly pb::MessageParser<AddStationRequest> _parser = new pb::MessageParser<AddStationRequest>(() => new AddStationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddStationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStationRequest(AddStationRequest other) : this() {
      accessToken_ = other.accessToken_;
      serial_ = other.serial_;
      auth_ = other.auth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStationRequest Clone() {
      return new AddStationRequest(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth" field.</summary>
    public const int AuthFieldNumber = 3;
    private string auth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Auth {
      get { return auth_; }
      set {
        auth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddStationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddStationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (Serial != other.Serial) return false;
      if (Auth != other.Auth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (Auth.Length != 0) hash ^= Auth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Serial);
      }
      if (Auth.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Auth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (Auth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Auth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddStationRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.Auth.Length != 0) {
        Auth = other.Auth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
          case 18: {
            Serial = input.ReadString();
            break;
          }
          case 26: {
            Auth = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddStationResponse : pb::IMessage<AddStationResponse> {
    private static readonly pb::MessageParser<AddStationResponse> _parser = new pb::MessageParser<AddStationResponse>(() => new AddStationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddStationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStationResponse(AddStationResponse other) : this() {
      result_ = other.result_;
      serial_ = other.serial_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddStationResponse Clone() {
      return new AddStationResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Circular2.Result result_ = global::Circular2.Result.Success;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddStationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddStationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Serial != other.Serial) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Circular2.Result.Success) hash ^= Result.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Circular2.Result.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Serial);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Circular2.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddStationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Circular2.Result.Success) {
        Result = other.Result;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Circular2.Result) input.ReadEnum();
            break;
          }
          case 18: {
            Serial = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShareStationRequest : pb::IMessage<ShareStationRequest> {
    private static readonly pb::MessageParser<ShareStationRequest> _parser = new pb::MessageParser<ShareStationRequest>(() => new ShareStationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareStationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareStationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareStationRequest(ShareStationRequest other) : this() {
      accessToken_ = other.accessToken_;
      serial_ = other.serial_;
      userID_ = other.userID_;
      auth_ = other.auth_ != null ? other.auth_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareStationRequest Clone() {
      return new ShareStationRequest(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth" field.</summary>
    public const int AuthFieldNumber = 4;
    private global::Circular2.AuthStation auth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.AuthStation Auth {
      get { return auth_; }
      set {
        auth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShareStationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShareStationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (Serial != other.Serial) return false;
      if (UserID != other.UserID) return false;
      if (!object.Equals(Auth, other.Auth)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (auth_ != null) hash ^= Auth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Serial);
      }
      if (UserID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserID);
      }
      if (auth_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Auth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (auth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Auth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShareStationRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      if (other.auth_ != null) {
        if (auth_ == null) {
          Auth = new global::Circular2.AuthStation();
        }
        Auth.MergeFrom(other.Auth);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
          case 18: {
            Serial = input.ReadString();
            break;
          }
          case 26: {
            UserID = input.ReadString();
            break;
          }
          case 34: {
            if (auth_ == null) {
              Auth = new global::Circular2.AuthStation();
            }
            input.ReadMessage(Auth);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShareStationResponse : pb::IMessage<ShareStationResponse> {
    private static readonly pb::MessageParser<ShareStationResponse> _parser = new pb::MessageParser<ShareStationResponse>(() => new ShareStationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShareStationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Circular2.Circular2Reflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareStationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareStationResponse(ShareStationResponse other) : this() {
      result_ = other.result_;
      serial_ = other.serial_;
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShareStationResponse Clone() {
      return new ShareStationResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Circular2.Result result_ = global::Circular2.Result.Success;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Circular2.Result Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 2;
    private string serial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShareStationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShareStationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Serial != other.Serial) return false;
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Circular2.Result.Success) hash ^= Result.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Circular2.Result.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Serial);
      }
      if (UserID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Circular2.Result.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShareStationResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Circular2.Result.Success) {
        Result = other.Result;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Circular2.Result) input.ReadEnum();
            break;
          }
          case 18: {
            Serial = input.ReadString();
            break;
          }
          case 26: {
            UserID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
